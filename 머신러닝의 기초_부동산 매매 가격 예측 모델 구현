{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-Dee8UTi7ZZq","executionInfo":{"status":"ok","timestamp":1680237022845,"user_tz":-540,"elapsed":12732,"user":{"displayName":"박상현","userId":"12478807059710532928"}},"outputId":"0d5d0300-0e79-44e3-b56f-8530c14f3e0a"},"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: pandas in /usr/local/lib/python3.9/dist-packages (1.4.4)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.9/dist-packages (1.22.4)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.9/dist-packages (3.7.1)\n","Requirement already satisfied: seaborn in /usr/local/lib/python3.9/dist-packages (0.12.2)\n","Collecting sklearn\n","  Downloading sklearn-0.0.post1.tar.gz (3.6 kB)\n","  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.9/dist-packages (from pandas) (2022.7.1)\n","Requirement already satisfied: python-dateutil>=2.8.1 in /usr/local/lib/python3.9/dist-packages (from pandas) (2.8.2)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.9/dist-packages (from matplotlib) (0.11.0)\n","Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.9/dist-packages (from matplotlib) (8.4.0)\n","Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.9/dist-packages (from matplotlib) (4.39.3)\n","Requirement already satisfied: importlib-resources>=3.2.0 in /usr/local/lib/python3.9/dist-packages (from matplotlib) (5.12.0)\n","Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.9/dist-packages (from matplotlib) (1.0.7)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.9/dist-packages (from matplotlib) (23.0)\n","Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.9/dist-packages (from matplotlib) (3.0.9)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.9/dist-packages (from matplotlib) (1.4.4)\n","Requirement already satisfied: zipp>=3.1.0 in /usr/local/lib/python3.9/dist-packages (from importlib-resources>=3.2.0->matplotlib) (3.15.0)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.9/dist-packages (from python-dateutil>=2.8.1->pandas) (1.16.0)\n","Building wheels for collected packages: sklearn\n","  Building wheel for sklearn (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for sklearn: filename=sklearn-0.0.post1-py3-none-any.whl size=2955 sha256=6c51dd3e92068a9d06b12b242d60c6932cd83eca21be09b654eb6c666e070dde\n","  Stored in directory: /root/.cache/pip/wheels/f8/e0/3d/9d0c2020c44a519b9f02ab4fa6d2a4a996c98d79ab2f569fa1\n","Successfully built sklearn\n","Installing collected packages: sklearn\n","Successfully installed sklearn-0.0.post1\n"]}],"source":["!pip install pandas numpy matplotlib seaborn sklearn\n"]},{"cell_type":"code","source":[],"metadata":{"id":"nPVjah-FQ-a9"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from google.colab import files\n","uploaded = files.upload()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":74},"id":"2v7HYNqS_9jp","executionInfo":{"status":"ok","timestamp":1680413811039,"user_tz":-540,"elapsed":24279,"user":{"displayName":"박상현","userId":"12478807059710532928"}},"outputId":"1d7c7f47-3369-4a57-dd9f-619e4e72c7ad"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-f2cdef75-b5ce-481c-9400-66898a984ba0\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-f2cdef75-b5ce-481c-9400-66898a984ba0\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving 코스피지수.csv to 코스피지수.csv\n"]}]},{"cell_type":"code","source":["import os\n","print(os.listdir())\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nLxMVq4B_w62","executionInfo":{"status":"ok","timestamp":1680238383664,"user_tz":-540,"elapsed":9,"user":{"displayName":"박상현","userId":"12478807059710532928"}},"outputId":"e4d2b908-2e8f-4349-c8ea-51458c9a1631"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["['.config', '코스피지수.csv', 'sample_data']\n"]}]},{"cell_type":"code","source":["from google.colab import files\n","\n","uploaded = files.upload()\n","\n","for filename in uploaded.keys():\n","    print('User uploaded file \"{name}\" with length {length} bytes'.format(\n","          name=filename, length=len(uploaded[filename])))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":92},"id":"TJwsJV5SA2Mi","executionInfo":{"status":"ok","timestamp":1680238414020,"user_tz":-540,"elapsed":6913,"user":{"displayName":"박상현","userId":"12478807059710532928"}},"outputId":"7bf90d21-0a87-46a1-e6b9-90ab83fab6f0"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-dc61078b-06ee-46ef-bb69-b87924729278\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-dc61078b-06ee-46ef-bb69-b87924729278\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving 코스피지수.csv to 코스피지수 (1).csv\n","User uploaded file \"코스피지수.csv\" with length 10732 bytes\n"]}]},{"cell_type":"code","source":["!pip install pandas\n","!pip install scikit-learn\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dtdYigL0A5t8","executionInfo":{"status":"ok","timestamp":1680238481153,"user_tz":-540,"elapsed":9242,"user":{"displayName":"박상현","userId":"12478807059710532928"}},"outputId":"f9b9fef0-a132-43e3-8d3b-11920f243366"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: pandas in /usr/local/lib/python3.9/dist-packages (1.4.4)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.9/dist-packages (from pandas) (2022.7.1)\n","Requirement already satisfied: numpy>=1.18.5 in /usr/local/lib/python3.9/dist-packages (from pandas) (1.22.4)\n","Requirement already satisfied: python-dateutil>=2.8.1 in /usr/local/lib/python3.9/dist-packages (from pandas) (2.8.2)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.9/dist-packages (from python-dateutil>=2.8.1->pandas) (1.16.0)\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: scikit-learn in /usr/local/lib/python3.9/dist-packages (1.2.2)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.9/dist-packages (from scikit-learn) (3.1.0)\n","Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.9/dist-packages (from scikit-learn) (1.1.1)\n","Requirement already satisfied: scipy>=1.3.2 in /usr/local/lib/python3.9/dist-packages (from scikit-learn) (1.10.1)\n","Requirement already satisfied: numpy>=1.17.3 in /usr/local/lib/python3.9/dist-packages (from scikit-learn) (1.22.4)\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","\n","gdp = pd.read_csv('/content/국내총생산(GDP).csv')\n"],"metadata":{"id":"8b4EaHftB9nD"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","\n","kospi = pd.read_csv('/content/코스피지수.csv')\n"],"metadata":{"id":"QCcVKsu1Huqp"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","from sklearn.linear_model import LinearRegression\n"],"metadata":{"id":"3p8ZRqnvewEV"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt"],"metadata":{"id":"opq6o997bqBb"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","\n","# 주어진 데이터\n","gdp_data = {\n","    'Date': [\n","        '2012/Q1', '2012/Q2', '2012/Q3', '2012/Q4', '2013/Q1', '2013/Q2', '2013/Q3', '2013/Q4', '2014/Q1',\n","        '2014/Q2', '2014/Q3', '2014/Q4', '2015/Q1', '2015/Q2', '2015/Q3', '2015/Q4', '2016/Q1', '2016/Q2',\n","        '2016/Q3', '2016/Q4', '2017/Q1', '2017/Q2', '2017/Q3', '2017/Q4', '2018/Q1', '2018/Q2', '2018/Q3',\n","        '2018/Q4', '2019/Q1', '2019/Q2', '2019/Q3', '2019/Q4', '2020/Q1', '2020/Q2', '2020/Q3', '2020/Q4',\n","        '2021/Q1', '2021/Q2', '2021/Q3', '2021/Q4', '2022/Q1', '2022/Q2', '2022/Q3', '2022/Q4'\n","    ],\n","    'Avg gdp': [\n","        361724.20, 379044.20, 376867.90, 397100.30, 370014, 390130.20, 390031.20, 412498.20, 383939.70,\n","        403578.90, 401978.70, 423220.20, 393340.90, 411511.30, 415415.80, 437752.40, 404413.10, 426490.20,\n","        427009.60, 448967.40, 417033, 438219.70, 443648.20, 461910.60, 429122.40, 451481.90, 454285.50,\n","        477115.60, 437132.60, 461814, 463965.50, 489754.30, 443841.50, 450409.10, 459981.30, 485291.50,\n","        453751.70, 478264.50, 478189.50, 505571.70, 467351.10, 492186.40, 493061.60, 512232.50\n","    ]\n","}\n","\n","# DataFrame 생성\n","gdp_df = pd.DataFrame(gdp_data)\n","\n","# 월별 데이터 생성\n","monthly_data = []\n","for idx, row in gdp_df.iterrows():\n","    year, quarter = row['Date'].split('/')\n","    if quarter == 'Q1':\n","        monthly_data.append((f'{year}/01', row['Avg gdp']))\n","        monthly_data.append((f'{year}/02', row['Avg gdp']))\n","        monthly_data.append((f'{year}/03', row['Avg gdp']))\n","    elif quarter == 'Q2':\n","        monthly_data.append((f'{year}/04', row['Avg gdp']))\n","        monthly_data.append((f'{year}/05', row['Avg gdp']))\n","        monthly_data.append((f'{year}/06', row['Avg gdp']))\n","    elif quarter == 'Q3':\n","        monthly_data.append((f'{year}/07', row['Avg gdp']))\n","        monthly_data.append((f'{year}/08', row['Avg gdp']))\n","        monthly_data.append((f'{year}/09', row['Avg gdp']))\n","    elif quarter == 'Q4':\n","        monthly_data.append((f'{year}/10', row['Avg gdp']))\n","        monthly_data.append((f'{year}/11', row['Avg gdp']))\n","        monthly_data.append((f'{year}/12', row['Avg gdp']))\n","\n","# 월별 GDP 데이터프레임 생성\n","monthly_gdp_df = pd.DataFrame(monthly_data, columns=['Date', 'GDP'])\n","\n","# 코랩에 저장\n","monthly_gdp_df.to_csv('/content/monthly_gdp.csv', index=False)\n"],"metadata":{"id":"m1deVRNLqMH8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","\n","# 주어진 데이터\n","monthly_kospi = {\n","    'Date': [\n","        '2012-01-01', '2012-02-01', '2012-03-01', '2012-04-01', '2012-05-01', '2012-06-01', '2012-07-01',\n","        '2012-08-01', '2012-09-01', '2012-10-01', '2012-11-01', '2012-12-01', '2013-01-01', '2013-02-01',\n","        '2013-03-01', '2013-04-01', '2013-05-01', '2013-06-01', '2013-07-01', '2013-08-01', '2013-09-01',\n","        '2013-10-01', '2013-11-01', '2013-12-01', '2014-01-01', '2014-02-01', '2014-03-01', '2014-04-01',\n","        '2014-05-01', '2014-06-01', '2014-07-01', '2014-08-01', '2014-09-01', '2014-10-01', '2014-11-01',\n","        '2014-12-01', '2015-01-01', '2015-02-01', '2015-03-01', '2015-04-01', '2015-05-01', '2015-06-01',\n","        '2015-07-01', '2015-08-01', '2015-09-01', '2015-10-01', '2015-11-01', '2015-12-01', '2016-01-01',\n","        '2016-02-01', '2016-03-01', '2016-04-01', '2016-05-01', '2016-06-01', '2016-07-01', '2016-08-01',\n","        '2016-09-01', '2016-10-01', '2016-11-01', '2016-12-01', '2017-01-01', '2017-02-01', '2017-03-01',\n","        '2017-04-01', '2017-05-01', '2017-06-01', '2017-07-01', '2017-08-01', '2017-09-01', '2017-10-01',\n","        '2017-11-01', '2017-12-01', '2018-01-01', '2018-02-01', '2018-03-01', '2018-04-01', '2018-05-01',\n","        '2018-06-01', '2018-07-01', '2018-08-01', '2018-09-01', '2018-10-01', '2018-11-01', '2018-12-01',\n","        '2019-01-01', '2019-02-01', '2019-03-01', '2019-04-01', '2019-05-01', '2019-06-01', '2019-07-01',\n","        '2019-08-01', '2019-09-01', '2019-10-01', '2019-11-01', '2019-12-01', '2020-01-01', '2020-02-01',\n","        '2020-03-01', '2020-04-01', '2020-05-01', '2020-06-01', '2020-07-01', '2020-08-01', '2020-09-01',\n","        '2020-10-01', '2020-11-01', '2020-12-01', '2021-01-01', '2021-02-01', '2021-03-01', '2021-04-01',\n","        '2021-05-01', '2021-06-01', '2021-07-01', '2021-08-01', '2021-09-01', '2021-10-01', '2021-11-01',\n","        '2021-12-01', '2022-01-01', '2022-02-01', '2022-03-01', '2022-04-01', '2022-05-01', '2022-06-01',\n","        '2022-07-01', '2022-08-01', '2022-09-01', '2022-10-01', '2022-11-01', '2022-12-01'\n","    ],\n","    'Close': [\n","        1955.790039, 2030.250000, 2014.040039, 1981.989990, 1843.469971, 1854.010010, 1881.989990,\n","        1905.119995, 1996.209961, 1912.060059, 1932.900024, 1997.050049, 1961.939941, 2026.489990,\n","        2004.890015, 1963.949951, 2001.050049, 1863.319946, 1914.030029, 1926.359985, 1996.959961,\n","        2030.089966, 2044.869995, 2011.339966, 1941.150024, 1979.989990, 1985.609985, 1961.790039,\n","        1994.959961, 2002.209961, 2076.120117, 2068.540039, 2020.089966, 1964.430054, 1980.780029,\n","        1915.589966, 1949.260010, 1985.800049, 2041.030029, 2127.169922, 2114.800049, 2074.199951,\n","        2030.160034, 1941.489990, 1962.810059, 2029.469971, 1991.969971, 1961.310059, 1912.060059,\n","        1916.660034, 1995.849976, 1994.150024, 1983.400024, 1970.349976, 2016.189941, 2034.650024,\n","        2043.630005, 2008.189941, 1983.479980, 2026.459961, 2067.570068, 2091.639893, 2160.229980,\n","        2205.439941, 2347.379883, 2391.790039, 2402.709961, 2363.189941, 2394.469971, 2523.429932,\n","        2476.370117, 2467.489990, 2566.459961, 2427.360107, 2445.850098, 2515.379883, 2423.010010,\n","        2326.129883, 2295.260010, 2322.879883, 2343.070068, 2029.689941, 2096.860107, 2041.040039,\n","        2204.850098, 2195.439941, 2140.669922, 2203.590088, 2041.739990, 2130.620117, 2024.550049,\n","        1967.790039, 2063.050049, 2083.479980, 2087.959961, 2197.669922, 2119.010010, 1987.010010,\n","        1754.640015, 1947.560059, 2029.599976, 2108.330078, 2249.370117, 2326.169922, 2327.889893,\n","        2267.149902, 2591.340088, 2873.469971, 2976.209961, 3012.949951, 3061.419922, 3147.860107,\n","        3203.919922, 3296.679932, 3202.320068, 3199.270020, 3068.820068, 2970.679932, 2839.010010,\n","        2977.649902, 2663.340088, 2699.179932, 2757.649902, 2695.050049, 2685.899902, 2332.639893,\n","        2451.500000, 2472.050049, 2155.489990, 2293.610107, 2472.530029, 2236.399902\n","    ]\n","}\n","\n","# Save the data as a CSV file\n","import pandas as pd\n","\n","df = pd.DataFrame(monthly_kospi)\n","df.to_csv('/content/monthly_kospi.csv', index=False)\n"],"metadata":{"id":"6HzTyywqs3Qi"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","\n","# 독립변수 리스트\n","real_estate_prices = {\n","'Date' : [\n","    '2012-01-01', '2012-02-01', '2012-03-01', '2012-04-01', '2012-05-01',\n","    '2012-06-01', '2012-07-01', '2012-08-01', '2012-09-01', '2012-10-01',\n","    '2012-11-01', '2012-12-01', '2013-01-01', '2013-02-01', '2013-03-01',\n","    '2013-04-01', '2013-05-01', '2013-06-01', '2013-07-01', '2013-08-01',\n","    '2013-09-01', '2013-10-01', '2013-11-01', '2013-12-01', '2014-01-01',\n","    '2014-02-01', '2014-03-01', '2014-04-01', '2014-05-01', '2014-06-01',\n","    '2014-07-01', '2014-08-01', '2014-09-01', '2014-10-01', '2014-11-01',\n","    '2014-12-01', '2015-01-01', '2015-02-01', '2015-03-01', '2015-04-01',\n","    '2015-05-01', '2015-06-01', '2015-07-01', '2015-08-01', '2015-09-01',\n","    '2015-10-01', '2015-11-01', '2015-12-01', '2016-01-01', '2016-02-01',\n","    '2016-03-01', '2016-04-01', '2016-05-01', '2016-06-01', '2016-07-01',\n","    '2016-08-01', '2016-09-01', '2016-10-01', '2016-11-01', '2016-12-01',\n","    '2017-01-01', '2017-02-01', '2017-03-01', '2017-04-01', '2017-05-01',\n","    '2017-06-01', '2017-07-01', '2017-08-01', '2017-09-01', '2017-10-01',\n","    '2017-11-01', '2017-12-01', '2018-01-01', '2018-02-01', '2018-03-01',\n","    '2018-04-01', '2018-05-01', '2018-06-01', '2018-07-01', '2018-08-01',\n","    '2018-09-01', '2018-10-01', '2018-11-01', '2018-12-01', '2019-01-01',\n","    '2019-02-01', '2019-03-01', '2019-04-01', '2019-05-01', '2019-06-01',\n","    '2019-07-01', '2019-08-01', '2019-09-01', '2019-10-01', '2019-11-01',\n","    '2019-12-01', '2020-01-01', '2020-02-01', '2020-03-01', '2020-04-01',\n","    '2020-05-01', '2020-06-01', '2020-07-01', '2020-08-01', '2020-09-01',\n","    '2020-10-01', '2020-11-01', '2020-12-01', '2021-01-01', '2021-02-01',\n","    '2021-03-01', '2021-04-01', '2021-05-01', '2021-06-01', '2021-07-01',\n","    '2021-08-01', '2021-09-01', '2021-10-01', '2021-11-01', '2021-12-01',\n","    '2022-01-01', '2022-02-01', '2022-03-01', '2022-04-01', '2022-05-01',\n","    '2022-06-01', '2022-07-01', '2022-08-01', '2022-09-01', '2022-10-01',\n","    '2022-11-01', '2022-12-01'\n","]\n","\n","# 독립변수 리스트\n","'Close' : [\n","    1955.790039, 2030.25, 2014.040039, 1981.98999, 1843.469971,\n","    1854.01001, 1881.98999, 1905.119995, 1996.209961, 1912.060059,\n","    1932.900024, 1997.050049, 1961.939941, 2026.48999, 2004.890015,\n","    1963.949951, 2001.050049, 1863.319946, 1914.030029, 1926.359985,\n","    1996.959961, 2030.089966, 2044.869995, 2011.339966, 1941.150024,\n","    1979.98999, 1985.609985, 1961.790039, 1994.959961, 2002.209961,\n","    2076.120117, 2068.540039, 2020.089966, 1964.430054, 1980.780029,\n","    1915.589966, 1949.26001, 1985.800049, 2041.030029, 2127.169922,\n","    2114.800049, 2074.280029, 2043.939941, 2071.5, 2102.949951,\n","    2148.900024, 2180.379882, 2257.830078, 2275.120117, 2271.719971,\n","    2329.910156, 2395.959961, 2380.149902, 2473.830078, 2553.949951,\n","    2578.540039, 2671.179932, 2652.870117, 2705.449951, 2775.600098,\n","    2731.209961, 2813.889893, 2873.340088, 2913.97998, 2929.669922,\n","    2880.339966, 2933.679932, 2976.73999, 3006.719971, 3057.879883,\n","    3026.129883, 3073.409912, 3105.709961, 3224.01001, 3298.459961,\n","    3351.570068, 3394.409912, 3429.23999, 3443.620117, 3511.379883,\n","    3580.840088, 3632.419922, 3621.959961, 3662.040039, 3628.709961,\n","    3700.649902, 3768.820068, 3831.969971, 3851.459961, 3817.879883,\n","    3912.560059, 4075.72998, 4163.75, 4200.189941, 4383.610352,\n","     4417.160156\n","]\n","}\n","\n","# 리스트의 길이 일치시키기\n","date = date[:len(close)]\n","\n","# 데이터프레임 생성\n","data = pd.DataFrame({'Date': date, 'Close': close})\n","\n","# 날짜를 datetime 형식으로 변환\n","data['Date'] = pd.to_datetime(data['Date'])\n","\n","print(real_estate_prices)\n","\n","data.to_csv('real_estate_prices.csv', index=False)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":134},"id":"0eOv0lLlvoGe","executionInfo":{"status":"error","timestamp":1685014696885,"user_tz":-540,"elapsed":326,"user":{"displayName":"박상현","userId":"12478807059710532928"}},"outputId":"8f581e3e-f369-49ac-fa01-5ef08252d08c"},"execution_count":103,"outputs":[{"output_type":"error","ename":"SyntaxError","evalue":"ignored","traceback":["\u001b[0;36m  File \u001b[0;32m\"<ipython-input-103-ef22476c2567>\"\u001b[0;36m, line \u001b[0;32m5\u001b[0m\n\u001b[0;31m    'Date' : [\u001b[0m\n\u001b[0m             ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax. Perhaps you forgot a comma?\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"0V7SLO8W4JOv"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from google.colab import files\n","uploaded = files.upload()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":145},"id":"koKvh-BV4JSn","executionInfo":{"status":"ok","timestamp":1685003728026,"user_tz":-540,"elapsed":9705,"user":{"displayName":"박상현","userId":"12478807059710532928"}},"outputId":"d5a48c97-74d8-4ede-fb0b-033b722e6112"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-9b9370de-19a2-438b-9e7d-21f234b87636\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-9b9370de-19a2-438b-9e7d-21f234b87636\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving monthly_estate.xlsx to monthly_estate.xlsx\n","Saving monthly_gdp.xlsx to monthly_gdp.xlsx\n","Saving monthly_kospi.xlsx to monthly_kospi.xlsx\n"]}]},{"cell_type":"code","source":["from google.colab import files\n","uploaded = files.upload()\n","\n","from google.colab import files\n","uploaded = files.upload()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":167},"id":"2YB2XmaI8HcP","executionInfo":{"status":"ok","timestamp":1685002597372,"user_tz":-540,"elapsed":15676,"user":{"displayName":"박상현","userId":"12478807059710532928"}},"outputId":"f98413a2-f7c4-4d50-c4a7-6c4ac1998355"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-e24dda34-1a59-4837-9023-315f402caea3\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-e24dda34-1a59-4837-9023-315f402caea3\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving monthly_estate.xlsx to monthly_estate (2).xlsx\n","Saving monthly_gdp.xlsx to monthly_gdp (2).xlsx\n","Saving monthly_kospi.xlsx to monthly_kospi (2).xlsx\n"]},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-4fbc5cfa-ee47-4448-bc1f-19adedd2a4bf\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-4fbc5cfa-ee47-4448-bc1f-19adedd2a4bf\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}}]},{"cell_type":"code","source":["!pip install pandas openpyxl\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6U1RrFoy8bB8","executionInfo":{"status":"ok","timestamp":1685012072955,"user_tz":-540,"elapsed":5382,"user":{"displayName":"박상현","userId":"12478807059710532928"}},"outputId":"65624bbd-7024-4b10-9a76-17d16608f893"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (1.5.3)\n","Requirement already satisfied: openpyxl in /usr/local/lib/python3.10/dist-packages (3.0.10)\n","Requirement already satisfied: python-dateutil>=2.8.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2022.7.1)\n","Requirement already satisfied: numpy>=1.21.0 in /usr/local/lib/python3.10/dist-packages (from pandas) (1.22.4)\n","Requirement already satisfied: et-xmlfile in /usr/local/lib/python3.10/dist-packages (from openpyxl) (1.1.0)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.1->pandas) (1.16.0)\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","\n","# 데이터프레임 생성\n","data = pd.read_excel('monthly_gdp.xlsx')\n","\n","# 열 이름 확인\n","column_names = data.columns\n","print(column_names)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"X78YsDClCiFb","executionInfo":{"status":"ok","timestamp":1685003859592,"user_tz":-540,"elapsed":358,"user":{"displayName":"박상현","userId":"12478807059710532928"}},"outputId":"db2e72be-0acc-4213-9301-d16b0b059a3f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Index(['Date', 'Avg gdp'], dtype='object')\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","\n","# monthly_estate.xlsx 파일 읽기\n","estate_data = pd.read_excel('monthly_estate.xlsx')\n","print(\"monthly_estate.xlsx 데이터 확인:\")\n","print(estate_data.head())\n","\n","# monthly_gdp.xlsx 파일 읽기\n","gdp_data = pd.read_excel('monthly_gdp.xlsx')\n","print(\"monthly_gdp.xlsx 데이터 확인:\")\n","print(gdp_data.head())\n","\n","# monthly_kospi.xlsx 파일 읽기\n","kospi_data = pd.read_excel('monthly_kospi.xlsx')\n","print(\"monthly_kospi.xlsx 데이터 확인:\")\n","print(kospi_data.head())\n","\n","# monthly_priceindex.xlsx 파일 읽기\n","kospi_data = pd.read_excel('monthly_priceindex.xlsx')\n","print(\"monthly_priceindex.xlsx 데이터 확인:\")\n","print(kospi_data.head())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BGOmBKq1Jvyj","executionInfo":{"status":"ok","timestamp":1685006008015,"user_tz":-540,"elapsed":361,"user":{"displayName":"박상현","userId":"12478807059710532928"}},"outputId":"fc95b450-5081-484f-b94c-beac74fbdc4d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["monthly_estate.xlsx 데이터 확인:\n","      Date    전국  서울특별시  부산광역시  대구광역시  인천광역시  광주광역시  대전광역시  울산광역시 세종특별자치시  \\\n","0  2012.01  84.5   83.7   85.2   66.1   83.7   80.9   74.6   90.7       -   \n","1  2012.02  84.5   83.5   85.0   66.4   83.6   80.9   74.4   91.4       -   \n","2  2012.03  84.5   83.3   84.9   66.7   83.4   81.3   74.3   92.0       -   \n","3  2012.04  84.5   82.9   84.7   67.0   83.3   81.5   74.1   92.6       -   \n","4  2012.05  84.4   82.5   84.5   67.1   83.0   81.9   73.9   93.1       -   \n","\n","    경기도   강원도  충청북도  충청남도  전라북도  전라남도  경상북도   경상남도  제주특별자치도  \n","0  80.1  92.6  92.6  90.3  98.1  89.3  88.5  102.2     84.6  \n","1  80.0  92.9  92.8  90.4  98.3  89.2  88.6  102.2     85.6  \n","2  79.9  93.2  93.2  90.8  98.7  89.3  89.0  102.3     85.8  \n","3  79.7  93.4  93.6  91.0  98.8  89.6  89.2  102.2     86.1  \n","4  79.5  93.5  94.1  91.3  98.7  89.7  89.5  102.1     86.8  \n","monthly_gdp.xlsx 데이터 확인:\n","      Date   Avg gdp\n","0  2012/Q1  361724.2\n","1  2012/Q2  379044.2\n","2  2012/Q3  376867.9\n","3  2012/Q4  397100.3\n","4  2013/Q1  370014.0\n","monthly_kospi.xlsx 데이터 확인:\n","         Date        Close\n","0  2012-01-01  1955.790039\n","1  2012-02-01  2030.250000\n","2  2012-03-01  2014.040039\n","3  2012-04-01  1981.989990\n","4  2012-05-01  1843.469971\n","monthly_priceindex.xlsx 데이터 확인:\n","      Date      지수\n","0  2012.01  91.242\n","1  2012.02  91.588\n","2  2012.03  91.614\n","3  2012.04  91.605\n","4  2012.05  91.769\n"]}]},{"cell_type":"code","source":["# 결측치 제거 (예시: 모든 열에 대해 결측치를 가진 행 제거)\n","data = data.dropna()\n","\n","# 데이터를 학습과 예측 데이터로 분리\n","train_ratio = 0.8  # 학습 데이터의 비율 (예시: 80%)\n","train_size = int(len(data) * train_ratio)\n","\n","train_data = data[:train_size]  # 학습 데이터\n","test_data = data[train_size:]  # 예측 데이터\n","\n","# 독립변수와 종속변수 분리\n","X_train = train_data[['Avg gdp', 'Close']]  # 학습 데이터의 독립변수\n","y_train = train_data['전국']  # 학습 데이터의 종속변수\n","\n","X_test = test_data[['Avg gdp', 'Close']]  # 예측 데이터의 독립변수\n","y_test = test_data['전국']  # 예측 데이터의 종속변수\n","\n","# 다중 회귀분석 모델 생성과 학습\n","model = LinearRegression()\n","model.fit(X_train, y_train)\n","\n","# 예측\n","prediction = model.predict(X_test)\n","\n","# 예측 결과 출력\n","print(\"예측 결과:\")\n","print(prediction)\n"],"metadata":{"id":"ynd26tR2YOmM","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1685012049349,"user_tz":-540,"elapsed":5,"user":{"displayName":"박상현","userId":"12478807059710532928"}},"outputId":"9737fead-97c6-4a2a-ea9b-78cd7fbfc40b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["예측 결과:\n","[83.48128015 83.55898262 83.5269628  83.55209862 83.5368356  83.60694093\n"," 83.53938244 83.51772433 83.43963713]\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","\n","# 데이터 파일 불러오기\n","gdp_data = pd.read_excel('/content/monthly_gdp.xlsx')\n","kospi_data = pd.read_excel('/content/monthly_kospi.xlsx')\n","estate_data = pd.read_excel('monthly_estate.xlsx')\n","priceindex_data = pd.read_excel('monthly_priceindex.xlsx')\n","\n","\n","\n","# 열 이름 확인\n","print(gdp_data.columns)\n","print(kospi_data.columns)\n","print(estate_data.columns)\n","print(priceindex_data.columns)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SGO0M1cc4JAs","executionInfo":{"status":"ok","timestamp":1685012823154,"user_tz":-540,"elapsed":345,"user":{"displayName":"박상현","userId":"12478807059710532928"}},"outputId":"bf50b372-e2e9-4d93-9262-c3300aabffb9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Index(['Date', 'Avg gdp'], dtype='object')\n","Index(['Date', 'Close'], dtype='object')\n","Index(['Date', '전국', '서울특별시', '부산광역시', '대구광역시', '인천광역시', '광주광역시', '대전광역시',\n","       '울산광역시', '세종특별자치시', '경기도', '강원도', '충청북도', '충청남도', '전라북도', '전라남도',\n","       '경상북도', '경상남도', '제주특별자치도'],\n","      dtype='object')\n","Index(['Date', '지수'], dtype='object')\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"D6CW0gjEhkoP"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","\n","# 데이터를 불러옵니다.\n","gdp = pd.read_excel(\"monthly_gdp.xlsx\")\n","\n","# Avg gdp 열을 가져옵니다.\n","avg_gdp = gdp[\"Avg gdp\"]\n","\n","import pandas as pd\n","\n","# 데이터를 불러옵니다.\n","kospi = pd.read_excel(\"monthly_kospi.xlsx\")\n","\n","# Close 열을 가져옵니다.\n","close = kospi[\"Close\"]\n","\n","import pandas as pd\n","\n","# 데이터를 불러옵니다.\n","priceindex = pd.read_excel(\"monthly_priceindex.xlsx\")\n","\n","# 지수 열을 가져옵니다.\n","index = priceindex[\"지수\"]\n","\n","# 데이터를 불러옵니다.\n","priceindex = pd.read_excel(\"monthly_estate.xlsx\")\n","\n","# 지수 열을 가져옵니다.\n","index = priceindex[\"전국\"]"],"metadata":{"id":"nNa9LhOPhkpd"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 결측치 제거 (예시: 모든 열에 대해 결측치를 가진 행 제거)\n","data = data.dropna()\n","\n","# 데이터를 학습과 예측 데이터로 분리\n","train_ratio = 0.8  # 학습 데이터의 비율 (예시: 80%)\n","train_size = int(len(data) * train_ratio)\n","\n","train_data = data[:train_size]  # 학습 데이터\n","test_data = data[train_size:]  # 예측 데이터\n","\n","# 독립변수와 종속변수 분리\n","X_train = train_data[['Avg gdp', 'Close','지수']]  # 학습 데이터의 독립변수\n","y_train = train_data['전국']  # 학습 데이터의 종속변수\n","\n","X_test = test_data[['Avg gdp', 'Close','지수']]  # 예측 데이터의 독립변수\n","y_test = test_data['전국']  # 예측 데이터의 종속변수\n","\n","# 다중 회귀분석 모델 생성과 학습\n","model = LinearRegression()\n","model.fit(X_train, y_train)\n","\n","# 예측\n","prediction = model.predict(X_test)\n","\n","# 예측 결과 출력\n","print(\"예측 결과:\")\n","print(prediction)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":426},"id":"5iuVimwogIgN","executionInfo":{"status":"error","timestamp":1685015470113,"user_tz":-540,"elapsed":341,"user":{"displayName":"박상현","userId":"12478807059710532928"}},"outputId":"62155dfa-635d-4f0d-cde6-197056d42bab"},"execution_count":104,"outputs":[{"output_type":"error","ename":"KeyError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m<ipython-input-104-53f40c8dcbc1>\u001b[0m in \u001b[0;36m<cell line: 12>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0;31m# 독립변수와 종속변수 분리\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 12\u001b[0;31m \u001b[0mX_train\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtrain_data\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Avg gdp'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Close'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'지수'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m  \u001b[0;31m# 학습 데이터의 독립변수\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     13\u001b[0m \u001b[0my_train\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtrain_data\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'전국'\u001b[0m\u001b[0;34m]\u001b[0m  \u001b[0;31m# 학습 데이터의 종속변수\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3811\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_iterator\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3812\u001b[0m                 \u001b[0mkey\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3813\u001b[0;31m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_indexer_strict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"columns\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3814\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3815\u001b[0m         \u001b[0;31m# take() does not accept boolean indexers\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36m_get_indexer_strict\u001b[0;34m(self, key, axis_name)\u001b[0m\n\u001b[1;32m   6068\u001b[0m             \u001b[0mkeyarr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnew_indexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reindex_non_unique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkeyarr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6069\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 6070\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_raise_if_missing\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkeyarr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   6071\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6072\u001b[0m         \u001b[0mkeyarr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtake\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36m_raise_if_missing\u001b[0;34m(self, key, indexer, axis_name)\u001b[0m\n\u001b[1;32m   6131\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6132\u001b[0m             \u001b[0mnot_found\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mensure_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mmissing_mask\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnonzero\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 6133\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"{not_found} not in index\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   6134\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6135\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0moverload\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: \"['지수'] not in index\""]}]},{"cell_type":"code","source":[],"metadata":{"id":"lEX5s8ripicA"},"execution_count":null,"outputs":[]}]}